{"version":3,"sources":["services/user.ts","components/UserInfo/UserInfo.tsx","api/users.ts","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/todos.ts","App.tsx","services/todo.ts","index.tsx"],"names":["findUserById","userId","users","find","user","id","UserInfo","className","href","email","name","username","TodoInfo","todo","title","completed","cn","TodoList","todos","map","App","preparedTodos","todosFromServer","usersFromServer","useState","setTitle","titleError","setTitleError","setUserId","userIdError","setUserIdError","setTodos","action","method","onSubmit","event","preventDefault","Math","max","generateTodoId","newTodo","htmlFor","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9444d2bf.chunk.js","sourcesContent":["import { User } from '../types/User';\n\nexport function findUserById(userId: number, users: User[]) {\n  return users.find(user => user.id === userId) || null;\n}\n","import { User } from '../../types/User';\n\ninterface Props {\n  user: User;\n}\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a className=\"UserInfo\" href={user.email ? `mailto:${user.email}` : '#'}>\n    {user.name}\n  </a>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\nimport users from '../../api/users';\nimport { findUserById } from '../../services/user';\n\ninterface Props {\n  todo: Todo;\n}\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    title,\n    userId,\n    completed,\n  } = todo;\n\n  const user = findUserById(userId, users);\n\n  return (\n    <article\n      data-id={todo.id}\n      className={cn(\n        'TodoInfo',\n        { 'TodoInfo--completed': completed === true },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n\n      {user && (\n        <UserInfo user={user} />\n      )}\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <>\n    {todos.map(todo => (\n      <TodoInfo\n        key={todo.id}\n        todo={todo}\n      />\n    ))}\n  </>\n);\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import './App.scss';\nimport { useState } from 'react';\nimport { findUserById } from './services/user';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\nimport { generateTodoId } from './services/todo';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nexport const App = () => {\n  const preparedTodos: Todo[] = todosFromServer.map((todo) => {\n    const user = findUserById(todo.userId, usersFromServer);\n\n    return {\n      ...todo,\n      user,\n    };\n  });\n\n  const [title, setTitle] = useState('');\n  const [titleError, setTitleError] = useState(false);\n  const [userId, setUserId] = useState(0);\n  const [userIdError, setUserIdError] = useState(false);\n  const [todos, setTodos] = useState(preparedTodos);\n\n  const reset = () => {\n    setTitle('');\n    setUserId(0);\n    setTitleError(false);\n    setUserIdError(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!title) {\n      setTitleError(true);\n    }\n\n    if (!userId) {\n      setUserIdError(true);\n    }\n\n    if (!title || !userId) {\n      return;\n    }\n\n    const id = generateTodoId(todos);\n    const user = findUserById(userId, usersFromServer);\n    const newTodo: Todo = {\n      id,\n      title,\n      userId,\n      user,\n      completed: false,\n    };\n\n    setTodos([\n      ...todos,\n      newTodo,\n    ]);\n    reset();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            id=\"title\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={(event) => {\n              setTitle(event.target.value);\n              setTitleError(false);\n            }}\n          />\n          {titleError && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">User: </label>\n          <select\n            data-cy=\"userSelect\"\n            id=\"user\"\n            value={userId}\n            onChange={(event) => {\n              setUserId(+event.target.value);\n              setUserIdError(false);\n            }}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option value={user.id}>{user.name}</option>\n            ))}\n          </select>\n\n          {userIdError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import { Todo } from '../types/Todo';\n\nexport function generateTodoId(todos: Todo[]) {\n  return Math.max(...todos.map(todo => todo.id)) + 1;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}